namespace Bugs
{
    constraint Unary(x:Num):Num

    wrappedLambdasOneLine:Unary
    {
        wrap(unary:Unary):Unary
        {
            return(x:Num):Num = unary(x)
        }

        foo = _(u:Num):Num = u
        fooWrapped = wrap(foo)
        fooWrappedTwice = wrap(fooWrapped)
        return = fooWrappedTwice
    }

    wrappedLambdasExplicit:Unary
    {
        wrap(unary:Unary):Unary
        {
            return = _(x:Num):Num
            {
                return = unary(x)
            }
        }

        foo = _(u:Num):Num = u
        fooWrapped = wrap(foo)
        fooWrappedTwice = wrap(fooWrapped)
        return = fooWrappedTwice
    }

    wrappedLambdasNamed:Unary
    {
        wrap(unary:Unary):Unary
        {
            namedFunction(x:Num):Num
            {
                return = unary(x)
            }
            return = namedFunction
        }

        foo = _(u:Num):Num = u
        fooWrapped = wrap(foo)
        fooWrappedTwice = wrap(fooWrapped)
        return = fooWrappedTwice
    }

    constraintError(x:Num):Num
    {
        constraint NumUnary(n:Num):Num
        evaluate(f:NumUnary, n:Num):Num = f(n)

        struct Adder(u:Num)
        {
            add(this:Adder, x:Num):Num = this.u.add(x)
        }
        zeroAdder = Adder(0)
        return = evaluate(zeroAdder.add, x)
    }
}
