struct TimeSpan(integer:Num, fractional:Num)
{
    fromSeconds(x:Num):TimeSpan = TimeSpan(x.floor, x.sub(x.floor))

    value(this:TimeSpan, period:Num):Num = this.integer.rem(period).add(this.fractional).rem(period)
    cycles(this:TimeSpan, period:Num):Num = this.integer.div(period).add(this.fractional.div(period).floor)

    mul(this:TimeSpan, x:Num):TimeSpan
    {
        struct MultiplicableTimeSpan(encodedInteger:Num, encodedFractional:Num, isPositive:Bool)
        {
            fromTimeSpan(ts:TimeSpan):MultiplicableTimeSpan
            {
                return = if(
                    ts.integer.geq(0),
                    MultiplicableTimeSpan(ts.integer, ts.fractional, true).regularise,
                    MultiplicableTimeSpan(ts.integer.abs.sub(1), 1.sub(ts.fractional), false).regularise
                )
            }

            toTimeSpan(mts:MultiplicableTimeSpan):TimeSpan
            {
                return = if(
                    mts.isPositive,
                    TimeSpan(mts.encodedInteger, mts.encodedFractional),
                    TimeSpan(mts.encodedInteger.mul(-1).sub(1), 1.sub(mts.encodedFractional))
                )
            }

            multiply(this:MultiplicableTimeSpan, x:Num)
            {
                resultIsPositive = this.isPositive.xnor(x.geq(0))
                multipliedInteger = this.encodedInteger.mul(x.abs)
                multipliedFractional = this.encodedFractional.mul(x.abs)

                # The multipliedInteger may have acquired a fractional component, so move this
                # onto the newFractional component.
                newInteger = multipliedInteger.floor
                newFractional = multipliedFractional.add(multipliedInteger.rem(1))

                return = MultiplicableTimeSpan(newInteger, newFractional, resultIsPositive).regularise
            }

            regularise(this:MultiplicableTimeSpan)
            {
                return = MultiplicableTimeSpan(this.encodedInteger.add(this.encodedFractional.floor), this.encodedFractional.rem(1), this.isPositive)
            }
        }

        multiplicableTimeSpan = MultiplicableTimeSpan.fromTimeSpan(this)
        return = multiplicableTimeSpan.multiply(x).toTimeSpan.regularise
    }

    div(this:TimeSpan, x:Num):TimeSpan
    {
        return = this.mul(1.div(x))
    }

    add(this:TimeSpan, other:TimeSpan):TimeSpan
    {
        return = TimeSpan(this.integer.add(other.integer), this.fractional.add(other.fractional)).regularise
    }

    sub(this:TimeSpan, other:TimeSpan):TimeSpan
    {
        return = this.add(other.negate)
    }

    regularise(this:TimeSpan):TimeSpan
    {
        return = TimeSpan(this.integer.add(this.fractional.floor), this.fractional.rem(1))
    }

    negate(this:TimeSpan):TimeSpan
    {
        return = TimeSpan(this.integer.mul(-1).sub(1), 1.sub(this.fractional)).regularise
    }

    abs(this:TimeSpan):TimeSpan
    {
        return = if(this.integer.geq(0), this, this.mul(-1))
    }
}
