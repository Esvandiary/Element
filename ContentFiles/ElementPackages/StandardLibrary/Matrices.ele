#column-major 3x3 coordinate matrix for representing linear transformations - INCOMPLETE
struct Matrix3x3(x:Vector3, y:Vector3, z:Vector3)
{
    xRow(a:Matrix3x3) = Vector3(a.x.x, a.y.x, a.z.x)
    yRow(a:Matrix3x3) = Vector3(a.x.y, a.y.y, a.z.y)
    zRow(a:Matrix3x3) = Vector3(a.x.z, a.y.z, a.z.z)
    
    transpose(m:Matrix4x4):Matrix3x3 = Matrix3x3(m.xRow, m.yRow, m.zRow)
      
    determinant(m:Matrix3x3):Num
    {
        component_x = m.x.x.mul(m.y.y.mul(m.z.z).sub(m.y.z.mul(m.z.y)))
        component_y = m.y.x.mul(m.y.y.mul(m.z.z).sub(m.y.z.mul(m.z.y)))
        component_z = m.z.x.mul(m.y.y.mul(m.z.z).sub(m.y.z.mul(m.z.y)))
        
        return = component_x.add(component_y).add(component_z)
    } 
}



#column-major 4x4 homogeneous coordinate matrix for representing affine transformations
struct Matrix4x4(x:Vector4, y:Vector4, z:Vector4, w:Vector4)
{        
     identity = 
         Matrix4x4(
            Vector4(1, 0, 0, 0),
            Vector4(0, 1, 0, 0),
            Vector4(0, 0, 1, 0),
            Vector4(0, 0, 0, 1))
               
    xRow(m:Matrix4x4) = Vector4(m.x.x, m.y.x, m.z.x, m.w.x)
    yRow(m:Matrix4x4) = Vector4(m.x.y, m.y.y, m.z.y, m.w.y)
    zRow(m:Matrix4x4) = Vector4(m.x.z, m.y.z, m.z.z, m.w.z)
    wRow(m:Matrix4x4) = Vector4(m.x.w, m.y.w, m.z.w, m.w.w)
       
    transpose(m:Matrix4x4):Matrix4x4 = Matrix4x4(m.xRow, m.yRow, m.zRow, m.wRow)
    
    position(m:Matrix4x4):Vector3 = Vector3(m.w.x, m.w.y, m.w.z)
    
    rotation_submatrix(m:Matrix4x4):Matrix3x3 = Matrix3x3(
                                                          Vector3(m.x.x, m.y.x, m.z.x),
                                                          Vector3(m.x.y, m.y.y, m.z.y),
                                                          Vector3(m.x.z, m.y.z, m.z.z))
    
    #this makes the assumption that Matrix4x4 is affine                                
    hasInverse(a:Matrix4x4):Bool = a.rotation_submatrix.determinant.neq(0)

    translation(translation:Vector3):Matrix4x4 = 
        Matrix4x4(
            Vector4(1, 0, 0, 0),
            Vector4(0, 1, 0, 0),
            Vector4(0, 0, 1, 0),
            Vector4(translation.x, translation.y, translation.z, 1))
            
    rotation(axis:Vector3, angle:Num):Matrix4x4 
    { 
        c = Num.cos(angle)
        s = Num.sin(angle)
        t = 1.sub(c)
        a = axis.normalize

        m_00 = t.mul(a.x).mul(a.x).add(c)
        m_11 = t.mul(a.y).mul(a.y).add(c)
        m_22 = t.mul(a.z).mul(a.z).add(c)
        
        row_0_tmp1 = a.x.mul(a.y).mul(t)
        row_0_tmp2 = a.z.mul(s)
        m_10 = row_0_tmp1.add(row_0_tmp2)
        m_01 = row_0_tmp1.sub(row_0_tmp2)
        
        row_1_tmp1 = a.x.mul(a.z).mul(t)
        row_1_tmp2 = a.y.mul(s)
        m_20 = row_1_tmp1.sub(row_1_tmp2)
        m_02 = row_1_tmp1.add(row_1_tmp2)
        
        row_2_tmp1 = a.y.mul(a.z).mul(t)
        row_2_tmp2 = a.x.mul(s)
        m_21 = row_2_tmp1.add(row_2_tmp2)
        m_12 = row_2_tmp1.sub(row_2_tmp2)

        return = Matrix4x4(
                           Vector4(m_00, m_10, m_20, 0),
                           Vector4(m_01, m_11, m_21, 0),
                           Vector4(m_02, m_12, m_22, 0),
                           Vector4(0,    0,    0,    1))                       
    }   
    
    transform(this:Matrix4x4, column_vector:Vector4):Vector4
    {
        multiply(matrixRow_vector:Vector4):Num = matrixRow_vector.dot(column_vector)
        x = multiply(this.xRow)
        y = multiply(this.yRow)
        z = multiply(this.zRow)
        w = multiply(this.wRow)
        return = Vector4(x, y, z, w)
        
        #TODO: memberwise this later
        #return = memberwise(multiply, Matrix4x4.transpose(matrix))
    }   
    
    multiply(a:Matrix4x4, b:Matrix4x4):Matrix4x4
    {
        x_component = Vector4(a.xRow.dot(b.x), a.yRow.dot(b.x), a.zRow.dot(b.x), a.wRow.dot(b.w))
        y_component = Vector4(a.xRow.dot(b.y), a.yRow.dot(b.y), a.zRow.dot(b.y), a.wRow.dot(b.w))
        z_component = Vector4(a.xRow.dot(b.z), a.yRow.dot(b.z), a.zRow.dot(b.z), a.wRow.dot(b.w))
        w_component = Vector4(a.xRow.dot(b.w), a.yRow.dot(b.w), a.zRow.dot(b.w), a.wRow.dot(b.w))
    
        return = Matrix4x4(x_component, y_component, z_component, w_component)
    }
    
    multiplyScalar(a:Matrix4x4, b:Num):Matrix4x4
    {
        x_component = a.x.mul(b)
        y_component = a.y.mul(b)
        z_component = a.z.mul(b)
        w_component = a.w.mul(b)
    
        return = Matrix4x4(x_component, y_component, z_component, w_component)
    }
    
    add(a:Matrix4x4, b:Matrix4x4):Matrix4x4
    {
        return = Matrix4x4(
            Vector4(a.x.add(b.x)),
            Vector4(a.y.add(b.y)),
            Vector4(a.z.add(b.z)),
            Vector4(a.w.add(b.w)))
    }
}






#check these produce the same output
#memberwise is important... spot the typo in this mess... hopefully I didn't make any, but...    
#multiply(a:Matrix4x4, b:Matrix4x4) {
#
#    x = Vector4(a.x.x.mul(b.x.x).add(a.y.x.mul(b.x.y)).add(a.z.x.mul(b.x.z)).add(a.w.x.mul(b.x.w)),
#                a.x.x.mul(b.y.x).add(a.y.x.mul(b.y.y)).add(a.z.x.mul(b.y.z)).add(a.w.x.mul(b.y.w)),
#                a.x.x.mul(b.z.x).add(a.y.x.mul(b.z.y)).add(a.z.x.mul(b.z.z)).add(a.w.x.mul(b.z.w)),
#                a.x.x.mul(b.w.x).add(a.y.x.mul(b.w.y)).add(a.z.x.mul(b.w.z)).add(a.w.x.mul(b.w.w)))
#       
#    y = Vector4(a.x.y.mul(b.x.x).add(a.y.y.mul(b.x.y)).add(a.z.y.mul(b.x.z)).add(a.w.y.mul(b.x.w)),
#                a.x.y.mul(b.y.x).add(a.y.y.mul(b.y.y)).add(a.z.y.mul(b.y.z)).add(a.w.y.mul(b.y.w)),
#                a.x.y.mul(b.z.x).add(a.y.y.mul(b.z.y)).add(a.z.y.mul(b.z.z)).add(a.w.y.mul(b.z.w)),
#                a.x.y.mul(b.w.x).add(a.y.y.mul(b.w.y)).add(a.z.y.mul(b.w.z)).add(a.w.y.mul(b.w.w)))
#        
#    z = Vector4(a.x.z.mul(b.x.x).add(a.y.z.mul(b.x.y)).add(a.z.z.mul(b.x.z)).add(a.w.z.mul(b.x.w)),
#                a.x.z.mul(b.y.x).add(a.y.z.mul(b.y.y)).add(a.z.z.mul(b.y.z)).add(a.w.z.mul(b.y.w)),
#                a.x.z.mul(b.z.x).add(a.y.z.mul(b.z.y)).add(a.z.z.mul(b.z.z)).add(a.w.z.mul(b.z.w)),
#                a.x.z.mul(b.w.x).add(a.y.z.mul(b.w.y)).add(a.z.z.mul(b.w.z)).add(a.w.z.mul(b.w.w)))
#           
#    w = Vector4(a.x.w.mul(b.x.x).add(a.y.w.mul(b.x.y)).add(a.z.w.mul(b.x.z)).add(a.w.w.mul(b.x.w)),
#                a.x.w.mul(b.y.x).add(a.y.w.mul(b.y.y)).add(a.z.w.mul(b.y.z)).add(a.w.w.mul(b.y.w)),
#                a.x.w.mul(b.z.x).add(a.y.w.mul(b.z.y)).add(a.z.w.mul(b.z.z)).add(a.w.w.mul(b.z.w)),
#                a.x.w.mul(b.w.x).add(a.y.w.mul(b.w.y)).add(a.z.w.mul(b.w.z)).add(a.w.w.mul(b.w.w)))
#   
#    return = Matrix4x4(x, y, z, w)
#}