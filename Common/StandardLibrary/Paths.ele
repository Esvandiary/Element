PathFunc(u:Num) :Vec3;
Path -> at : PathFunc, length:Num;
BoundedPath -> atBounded : PathFunc, length:Num;

PathIndexer(i:Num) : BoundedPath;
PathArray -> count:Num, index:PathIndexer;

Vec3Indexer(i:Num) : Vec3;
Vec3Array -> count:Num, index:Vec3Indexer;

Segment -> a:Vec3, b:Vec3;
SegmentIndexer(i:Num) : Segment;
SegmentArray -> count:Num, index:SegmentIndexer;

Paths
{
	PingPong(path:BoundedPath) : Path
	{
		at(u:Num) = path.atBounded(abs(sub(rem(u, 2), 1)));
		length = mul(path.length, 2);
		return = Path(at, length);
	}

	Repeat(path:BoundedPath) : Path
	{
		at(u:Num) = path.atBounded(rem(u, 1));
		return = Path(at, path.length);
	}

	Easing(path:BoundedPath) : Path
	{
		at(u:Num) = path.atBounded(div(sub(1, cos(mul(pi, u))), 2));
		return = Path(at, path.length);
	}

	WithBounds(path:Path, start:Num, end:Num) : BoundedPath
	{
		segment = sub(end, start);
		at(u:Num) = path.at(mul(add(u, start), segment));
		return = BoundedPath(at, mul(path.length, segment));
	}

	PathSegment(path:BoundedPath, start:Num, end:Num) : BoundedPath
	{
		segment = sub(end, start);
		at(u:Num) = path.atBounded(mul(add(u, start), segment));
		return = BoundedPath(at, mul(path.length, segment));
	}

	LineBetween(a:Path, aPeriod:Num, b:Path, bPeriod:Num, time:Num) : Path
	{
		pointA = a.at(rem(div(time, aPeriod), 1));
		pointB = b.at(rem(div(time, bPeriod), 1));
		return = Easing(Line(pointA, pointB));
	}

	Concatenate(a:Path, b:Path) : Path
	{
		at(u:Num) = if(lt(u, 0.5), a.at(mul(u, 2)), b.at(mul(u, 2)));
		length = add(a.length, b.length);
		return = Path(at, length);
	}

	Join(pathArray:PathArray) : BoundedPath
	{
		pathLength(p:BoundedPath) = p.length;
		length = aggregate(add, Array.Select(pathArray, pathLength), 0);
		return = BoundedPath(at, length);
		at(u:Num)
		{
			adjustedU = mul(u, pathArray.count);
			currentPath = pathArray.index(adjustedU);
			localU = rem(adjustedU, 1);
			return = currentPath.atBounded(localU);
		}
	}

	Animate(brush:Path, trajectory:Path, duration:Num, time:Num) : Path
	{
		offset = trajectory.at(div(time, duration));
		pathEval(u:Num):Vec3 = Vec.Add(brush.at(u), offset);
		return = Path(pathEval, brush.length);
	}

	Offset(path:Path, amount:Num) : Path
	{
		at(u:Num) = path.at(rem(add(u, amount), 1));
		return = Path(at, path.length);
	}

	Reverse(path:Path) : Path
	{
		at(u:Num) = path.at(sub(1, u));
		return = Path(at, path.length);
	}

	Translate(path:Path, position:Vec3) : Path
	{
		at(u:Num) = Vec.Add(position, path.at(u));
		return = Path(at, path.length);
	}

	Transform(path:Path, matrix:Matrix4x4) : Path
	{
		at(u:Num) = V3.TransformPosition(path.at(u), matrix);
		return = Path(at, path.length);
	}

	Circle(position:Vec3, radius:Num) : Path
	{
		at(u:Num) = Vec.Add(position, Vec3(
			mul(sin(mul(u, tau)), radius),
			mul(cos(mul(u, tau)), radius),
			0
		));
		length = mul(radius, tau);
		return = Path(at, length);
	}

	Line(endpointA:Vec3, endpointB:Vec3) : BoundedPath
	{
		at(u:Num) = Vec.Lerp(u, endpointA, endpointB);
		length = V3.Distance(endpointA, endpointB);
		return = BoundedPath(at, length);
	}

	RepeatingLine(endpointA:Vec3, endpointB:Vec3) : Path
	{
		return = Repeat(Line(endpointA, endpointB));
	}

	PingPongLine(endpointA:Vec3, endpointB:Vec3) : Path
	{
		return = PingPong(Line(endpointA, endpointB));
	}

	Rectangle(width:Num, height:Num) : Path
	{
		at(u:Num)
		{
			u1 = mul(add(width, height), rem(mul(u, 2), 1));
			pos = if(lt(u1, width),
				Vec3(u1, 0, 0),
				Vec3(width, sub(u1, width), 0)
			);
			return = if(lt(rem(u, 1), 0.5),
				pos,
				Vec.Add(Vec.Sub(Vec3(0, 0, 0), pos), Vec3(width, height, 0))
			);
		}
		return = Translate(Path(at, mul(2, add(width, height))), Vec3(div(width, -2), div(height, -2), 0));
	}

	Lissajous(size:Vec2, frequency:Vec2, delta:Vec2) : Path
	{
		at(u:Num)
		{
			t = Vec2(u, u);
			v = Vec.Mul(size, zip(cos, Vec.Sub(Vec.Mul(frequency, t), delta)));
			return = Vec3(v.x, v.y, 0);
		}
		l = Vec.Mul(size, frequency);
		return = Path(at, mul(div(2, pi), ellipse(l.x, l.y)));
	}

	Rose(diameter:Num, n:Num, d:Num, frequency:Num) : Path
	{
		k = div(n, d);
		at(u:Num)
		{
			ut = mul(u, tau);
			r = mul(diameter, cos(mul(ut, k)));
			return = Vec3(
				mul(r, cos(mul(ut, frequency))),
				mul(r, sin(mul(ut, frequency))),
				0
			);
		}
		return = Path(at, mul(mul(diameter, 4), ellipse(k, 1)));
	}

	PolyLineSimple(points:Vec3Array) : BoundedPath
	{
		segment(i:Num) = Segment(points.index(i), points.index(add(i, 1)));
		segments = TArray(sub(points.count, 1), segment);
		return = PolySegmentSimple(segments);
	}

	PolySegmentSimple(segments:SegmentArray) : BoundedPath
	{
		segmentLength(s:Segment) = V3.Distance(s.a, s.b);
		totalLength = aggregate(add, Array.Select(segments, segmentLength), 0);

		at(u:Num)
		{
			adjustedU = mul(u, segments.count);
			target = segments.index(adjustedU);
			return = Vec.Lerp(rem(adjustedU, 1), target.a, target.b);
		}
		return = BoundedPath(at, totalLength);
	}

	PolyLine(points:Vec3Array) : BoundedPath
	{
		segment(i:Num) = Segment(points.index(i), points.index(add(i, 1)));
		segments = TArray(sub(points.count, 1), segment);
		return = PolySegment(segments);
	}

	PolySegment(segments:SegmentArray) : BoundedPath
	{
		segmentLength(s:Segment) = V3.Distance(s.a, s.b);
		totalLength = aggregate(add, Array.Select(segments, segmentLength), 0);

		at(u:Num)
		{
			adjustedU = mul(u, totalLength);
			SegmentIteration -> s:Segment, distance:Num, continue:Num;
			segmentFinder(current:SegmentIteration, next:Segment) : SegmentIteration =
				if (current.continue,
					if(lt(current.distance, segmentLength(next)),
						SegmentIteration(next, current.distance, 0),
						SegmentIteration(current.s, sub(current.distance, segmentLength(next)), 1)
					),
					current
				);
			findResult = aggregate(segmentFinder, Array.Skip(segments, 1), SegmentIteration(segments.index(0), adjustedU, 1));
			targetU = div(findResult.distance, segmentLength(findResult.s));
			return = Vec.Lerp(targetU, findResult.s.a, findResult.s.b);
		}
		return = BoundedPath(at, totalLength);
	}
}
