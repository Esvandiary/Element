namespace Vector
{
    add(a, b) = memberwise(Num.add, a, b);
    sub(a, b) = memberwise(Num.sub, a, b);
    mul(a, b) = memberwise(Num.mul, a, b);
    div(a, b) = memberwise(Num.div, a, b);

    lerp(t:Num, a, b) = memberwise(_(ax, bx) = Num.lerp(t, ax, bx), a, b);

    scale(v, scaleFactor:Num) = map(_(component) = component.mul(scaleFactor), v);
}

struct Vector2(x:Num, y:Num)
{
    Dot(a:Vector2, b:Vector2):Num
    {
        s = Vector2(a.x.mul(b.x), a.y.mul(b.y));
        return = s.x.add(s.y);
    }

    Magnitude(v:Vector2):Num = Num.sqrt(v.Dot(v));
    Distance(a:Vector2, b:Vector2):Num = Magnitude(Vector2(a.x.sub(b.x), a.y.sub(b.y)));

    Normalize(a:Vector2):Vector2
    {
       len = Magnitude(a);
       return = Vector2(a.x.div(len), a.y.div(len));
       
       #return = v.div(Magnitude(v));
       #return = map(mapper, v);
    }
  
    Angle(a:Vector2, b:Vector2):Num = Num.degrees(Num.acos(a.Dot(b).div(a.Magnitude.mul(b.Magnitude))));  
#   Angle(a:Vector2, b:Vector2):Num
#   {
#       angle = degrees(atan2(sub(b.y, a.y), sub(b.x, a.x)));
#       return = if(lt(angle, 0), add(angle, 360), angle);
#   }
   
    #Reflect
    #Perpendicular
}

#struct Vector3(x:Num, y:Num, z:Num)
#{
#    Up = Vec3(0, 0, 1);
#    Down = Vec3(0, 0, -1);
#    Right = Vec3(1, 0, 0);
#    Left = Vec3(-1, 0, 0);
#    Forward = Vec3(0, 1, 0);
#    Back = Vec3(0, -1, 0);
#
#    Dot(a:Vector3, b:Vector3):Num
#    {
#        s = Vector.mul(a, b);
#        return = add(add(s.x, s.y), s.z);
#    }
#
#    Cross(a:Vector3, b:Vector3) =
#        Vector3(
#            sub(mul(a.y, b.z), mul(a.z, b.y)),
#            sub(mul(a.z, b.x), mul(a.x, b.z)),
#            sub(mul(a.x, b.y), mul(a.y, b.x))
#        );
#
#    Magnitude(v) = sqrt(Dot(v, v));
#
#    Normalize(v)
#    {
#        mapper(x) = div(x, Magnitude(v));
#        return = map(mapper, v);
#    }
#
#    Distance(a, b) = Magnitude(Vector.sub(b, a));
#
#    TransformPosition(vec:Vector3, matrix:Matrix4x4):Vector3
#    {
#        result = V4.Transform(Vector4(vec.x, vec.y, vec.z, 1), matrix);
#        return = Vector3(result.x, result.y, result.z);
#    }
#
#    TransformDirection(vec:Vec3, matrix:Matrix4x4):Vector3
#    {
#        result = V4.Transform(Vector4(vec.x, vec.y, vec.z, 0), matrix);
#        return = Vec3(result.x, result.y, result.z);
#    }
#}
#
#struct Vector4(x:Num, y:Num, z:Num, w:Num)
#{
#    Dot(a:Vector4, b:Vector4):Num
#    {
#        s = Vector.mul(a, b);
#        return = add(add(s.x, s.y), add(s.z, s.w));
#    }
#
#    Transform(vector:Vector4, matrix:Matrix4x4):Vector4
#    {
#        multiply(m):Num = Dot(vector, m);
#        return = map(multiply, Matrix.Transpose(matrix));
#    }
#}
