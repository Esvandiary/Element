intrinsic struct Num
{
    # Arithmetic functions
    # a + b
    intrinsic add(a:Num, b:Num):Num;
    # a - b
    intrinsic sub(a:Num, b:Num):Num;
    # a * b
    intrinsic mul(a:Num, b:Num):Num;
    # a / b
    intrinsic div(a:Num, b:Num):Num;

    # a ^ b
    intrinsic pow(a:Num, b:Num):Num;
    # a % b - rounds towards negative infinity
    intrinsic rem(a:Num, b:Num):Num;

    # Finds the minimum of 2 numbers
    intrinsic min(a:Num, b:Num):Num;

    # Finds the maximum of 2 numbers
    intrinsic max(a:Num, b:Num):Num;

    # |a| - absolute value function
    intrinsic abs(a:Num):Num;

    # ⌈a⌉ - smallest next integer
    intrinsic ceil(a:Num):Num;
    # ⌊a⌋ - largest previous integer
    intrinsic floor(a:Num):Num;

    # Trigonometric functions
    intrinsic sin(theta:Num):Num;
    intrinsic cos(theta:Num):Num;
    intrinsic tan(theta:Num):Num;

    intrinsic asin(theta:Num):Num;
    intrinsic acos(theta:Num):Num;
    intrinsic atan(theta:Num):Num;

    # 2 argument arctangent function where a and b specify a cartesian coordinate
    intrinsic atan2(y:Num, x:Num):Num;

    degrees(theta:Num):Num = theta.mul(180.div(pi));
    radians(theta:Num):Num = theta.mul(pi.div(180));


    # Logarithmic functions
    intrinsic ln(a:Num):Num;
    intrinsic log(a:Num, b:Num):Num;

    # Constants
    intrinsic NaN;
    intrinsic PositiveInfinity;
    intrinsic NegativeInfinity;
    pi   = 3.14159265359;
    tau  = pi.mul(2);
    e    = 2.718281828459045;

    sqr(a:Num):Num          = a.mul(a);
    sqrt(a:Num):Num         = a.pow(0.5);
    half(a:Num):Num         = mul(a, 0.5);
    
    exp(a:Num, e:Num):Num   = a.pow(e);

    # remainder rounded towards 0
    mod(a:Num, b:Num):Num
    {
        c = a.rem(b);
        return = c.mul(b).lt(0).if(add(c, b), c);
    }

    negate(a:Num):Num                   = 0.sub(a);
    roundToZero(a:Num):Num              = a.sub(a.rem(1));
    sign(n:Num):Num                     = n.leq(0).if(n.eq(0).if(0, -1), 1);
    dist(a:Num, b:Num):Num              = a.sub(b).abs;
    lerp(t:Num, a:Num, b:Num):Num       = a.add(t.mul(b.sub(a))); #t.lt(0).if(a, t.gt(1).if(b, a.add(t.mul(b.sub(a)))));
    clamp(a:Num, min:Num, max:Num):Num  = a.max(min).min(max);
    

    # Comparison functions
    eq(a:Num, b:Num):Bool   = Bool.not(a.neq(b));
    neq(a:Num, b:Num):Bool  = a.sub(b).abs.to(Bool);
    lt(a:Num, b:Num):Bool   = b.sub(a).to(Bool);
    leq(a:Num, b:Num):Bool  = Bool.not(a.gt(b));
    gt(a:Num, b:Num):Bool   = a.sub(b).to(Bool);
    geq(a:Num, b:Num):Bool  = Bool.not(a.lt(b));

    to(a:Num, constructor:Unary) = constructor(a);
}