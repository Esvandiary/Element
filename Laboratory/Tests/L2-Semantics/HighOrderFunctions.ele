intrinsic struct Num
{
	intrinsic add(a:Num, b:Num);
	intrinsic sub(a:Num, b:Num);
}
struct Foo(a);

constraint Indexer(i:Num);
constraint Binary(a, b);

intrinsic list;
intrinsic struct List(at:Indexer, count:Num)
{
	intrinsic fold(list:List, initial, accumulator:Binary);
}

add = Num.add;
addFromInstanceFunction = 5.add;
getAdd(a:Num) = a.add;
addAndGetSub(a:Num, b:Num)
{
	sum = a.add(b);
	return(a:Num) = sum.sub(a);
}
sum(numbers:List) = numbers.fold(0, _(accum, element) = accum.add(element));

constraint NumFunction(a):Num;
constraint FooFunction(a):Foo;
constraint StrictNumFunction(a:Num):Num;
constraint StrictFooFunction(a:Foo):Foo;

numFunctionInstance(a):Num = a;
notNumFunctionInstance(a):Foo = a;
strictNumFunctionInstance(a:Num):Num = a;
strictFooFunctionInstance(a:Foo):Foo = a;

returnsNumFunction(fn:NumFunction) = fn;
returnsFooFunction(fn:FooFunction) = fn;
returnsStrictNumFunction(fn:StrictNumFunction) = fn;
returnsStrictFooFunction(fn:StrictFooFunction) = fn;

applyNumFunction(fn:NumFunction, a) = fn(a);
applyFooFunction(fn:FooFunction, a) = fn(a);
applyStrictNumFunction(fn:StrictNumFunction, a) = fn(a);
applyStrictFooFunction(fn:StrictFooFunction, a) = fn(a);

applyFunction(fn:Function, a) = fn(a);